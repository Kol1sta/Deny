// –ú–û–õ–Æ –ù–ï –¢–†–û–ì–ê–ô–¢–ï –≠–¢–û üôèüôè

import { Interaction, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, InteractionType, ChannelType, ButtonBuilder } from "discord.js";
import { EventItemOptions, EventItem } from "../services/events";
import Client from "../services/client";
import { MUTE_ROLE_ID, OWNER_ID, STAFF_CHANNEL_ID, ADMIN_ROLE_ID, MOD_ROLE_ID, BOT_ID, OWNER_ROLE_ID } from "../../config.json";

const options: EventItemOptions = {
    isOnce: false,
    name: 'interactionCreate'
}

export default new EventItem(options, async (interaction: Interaction, client: Client) => {
    // if(interaction.isChatInputCommand()) {
    //     const command = client.getCommandByName(interaction.commandName);

    //     if(!command) {
    //         await interaction.reply("Command handler not found");
    //         return;
    //     }

    //     try {
    //         await command.execute(interaction);
    //     } catch(e) {
    //         await interaction.reply("Error at server side");
    //         console.log(e);
    //         return;
    //     }
    // }

    if(interaction.isButton()) {
        const member = await interaction.guild?.members.fetch(interaction.user.id);

        if(interaction.customId === "staff-form") {
            if(member?.isCommunicationDisabled() || member?.roles.cache.find(role => role.id == MUTE_ROLE_ID)) {
                await interaction.reply({ ephemeral: true, content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" });
                return;
            }

            const modalWindow = new ModalBuilder()
                .setCustomId("staff-form-modal")
                .setTitle("–ê–Ω–∫–µ—Ç–∞")

            const roleInput = new TextInputBuilder()
                .setCustomId("staff-role")
                .setLabel("–ù–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å?")
                .setPlaceholder("–•–µ–ª–ø–µ—Ä/–ü–∏–∞—Ä –ú–µ–Ω–µ–¥–∂–µ—Ä")
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const experienceInput = new TextInputBuilder()
                .setCustomId("staff-experience")
                .setLabel("–í–∞—à –æ–ø—ã—Ç –Ω–∞ —ç—Ç–æ–π —Ä–æ–ª–∏")
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const characterInput = new TextInputBuilder()
                .setCustomId("staff-character")
                .setLabel("–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è")
                .setPlaceholder("–í –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –±—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const actionRow1 = new ActionRowBuilder<TextInputBuilder>().addComponents(roleInput);
            const actionRow2 = new ActionRowBuilder<TextInputBuilder>().addComponents(experienceInput);
            const actionRow3 = new ActionRowBuilder<TextInputBuilder>().addComponents(characterInput);

            modalWindow.addComponents(actionRow1, actionRow2, actionRow3);

            await interaction.showModal(modalWindow);
        } else if(interaction.customId === "ticket-open") {
            if(member?.isCommunicationDisabled() || member?.roles.cache.find(role => role.id == MUTE_ROLE_ID)) {
                await interaction.reply({ ephemeral: true, content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç" });
                return;
            }

            const channel = await interaction.guild?.channels.create({
                name: `ticket-${interaction.user.username}`,
                type: ChannelType.GuildText,
                permissionOverwrites: [
                    {
                        id: interaction.guild.id,
                        deny: ['ViewChannel'],
                    },
                    {
                        id: interaction.user.id,
                        allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory'],
                    },
                    {
                        id: ADMIN_ROLE_ID,
                        allow: ['ViewChannel', 'SendMessages', 'ManageMessages', 'ManageChannels'],
                    },
                    {
                        id: MOD_ROLE_ID,
                        allow: ['ViewChannel', 'SendMessages', 'ManageMessages'],
                    },
                    {
                        id: client.user?.id || BOT_ID,
                        allow: ['ViewChannel', 'SendMessages', 'ManageMessages', 'ManageChannels'],
                    }
                ],
            });

            if(!channel) {
                await interaction.reply({ ephemeral: true, content: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞" });
                return;
            }

            const embed = new EmbedBuilder()
                .setTitle("–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç")
                .setDescription(`–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! –£—á—Ç–∏—Ç–µ, —á—Ç–æ –µ—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω –Ω–∞–ø—Ä—è–º—É—é —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –∑–∞–¥–∞—Ç—å –≤ —Ñ–æ—Ä—É–º–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∏–¥–µ–π, –≥–¥–µ –≤–∞–º —Å–º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏`)
                .setFooter({ text: `–°–æ–∑–¥–∞–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.avatarURL() || undefined })
                .setTimestamp()
                .setThumbnail(interaction.user.avatarURL())
                .setColor(0xFFF4D8)

            const closeButton = new ActionRowBuilder<ButtonBuilder>()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId("ticket-close")
                        .setLabel("–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
                        .setStyle(2)
                        .setEmoji("‚ùå")
                )

            await channel.send({ content: `||<@${interaction.user.id}><@&1410395253369737296><@&1410395281534750720>||`, embeds: [embed], components: [closeButton] });
            await interaction.reply({ ephemeral: true, content: `–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${channel}` });
        } else if(interaction.customId === "ticket-close") {
            try {
                if (!interaction.channel || !interaction.channel.isTextBased() || interaction.channel.isDMBased()) {
                    await interaction.reply({ content: "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö", ephemeral: true });
                    return;
                }

                const guildChannel = interaction.channel as any;

                const isTicketOwner = guildChannel.name?.includes(interaction.user.username);
                const hasStaffRole = member?.roles.cache.some(role =>
                    role.id === OWNER_ROLE_ID ||
                    role.id === ADMIN_ROLE_ID ||
                    role.id === MOD_ROLE_ID
                );

                if (!isTicketOwner && !hasStaffRole) {
                    await interaction.reply({
                        content: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞",
                        ephemeral: true
                    });
                    return;
                }

                const closeEmbed = new EmbedBuilder()
                    .setTitle("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
                    .setDescription(`–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}`)
                    .addFields(
                        { name: "–ó–∞–∫—Ä—ã—Ç", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                        { name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value: `${interaction.user}`, inline: true }
                    )
                    .setColor(0xFFF4D8)
                    .setTimestamp()
                    .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.avatarURL() || undefined })

                const disabledButton = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId("ticket-close")
                            .setLabel("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
                            .setStyle(2)
                            .setDisabled(true)
                            .setEmoji("üîí")
                    );

                await interaction.reply({
                    embeds: [closeEmbed],
                    components: [disabledButton]
                });

                await guildChannel.permissionOverwrites.edit(interaction.guild!.id, {
                    ViewChannel: false,
                    SendMessages: false
                });

                const channelMembers = guildChannel.members?.map((member: any) => member.id) || [];

                for (const memberId of channelMembers) {
                    const member = await interaction.guild?.members.fetch(memberId).catch(() => null);
                    if (member) {
                        const isStaff = member.roles.cache.some(role =>
                            role.id === OWNER_ROLE_ID ||
                            role.id === ADMIN_ROLE_ID ||
                            role.id === MOD_ROLE_ID
                        );

                        if (!isStaff) {
                            await guildChannel.permissionOverwrites.edit(memberId, {
                                ViewChannel: false,
                                SendMessages: false
                            });
                        }
                    }
                }

                await guildChannel.permissionOverwrites.edit(interaction.guild!.id, {
                    ViewChannel: false
                });

                await guildChannel.permissionOverwrites.edit(ADMIN_ROLE_ID, {
                    ViewChannel: true,
                    SendMessages: true,
                    ManageMessages: true
                });

                await guildChannel.permissionOverwrites.edit(MOD_ROLE_ID, {
                    ViewChannel: true,
                    SendMessages: true,
                    ManageMessages: true
                });

                await guildChannel.permissionOverwrites.edit(client.user!.id, {
                    ViewChannel: true,
                    SendMessages: true,
                    ManageMessages: true,
                    ManageChannels: true
                });

                await guildChannel.setName(`closed-${guildChannel.name}`);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: ', error);
                await interaction.reply({
                    content: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞",
                    ephemeral: true
                });
            }
        }
    }

    if(interaction.type === InteractionType.ModalSubmit) {
        if(interaction.customId === "staff-form-modal") {
            await interaction.deferReply({ ephemeral: true });

            const role = interaction.fields.getTextInputValue('staff-role');
            const experience = interaction.fields.getTextInputValue('staff-experience');
            const character = interaction.fields.getTextInputValue('staff-character');

            const channel = interaction.guild?.channels.cache.find(ch => ch.id === STAFF_CHANNEL_ID && ch.isTextBased());

            if(channel && channel.isTextBased()) {
                const embed = new EmbedBuilder()
                    .setTitle("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚ÇäÀö‚ú¶                                       ‚Çä")
                    .setDescription(`üå∫Ôπï**–†–æ–ª—å**Ôπî‚ÇäÀö‚ú¶
\`\`\`
${role}
\`\`\`

üíÆÔπï**–û–ø—ã—Ç**Ôπî‚ÇäÀö‚ú¶:
\`\`\`
${experience}
\`\`\`

üçµÔπï**–û —Å–µ–±–µ**Ôπî‚ÇäÀö‚ú¶
\`\`\`
${character}
\`\`\`
`)
                    .setFooter({ text: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.avatarURL() || undefined })
                    .setTimestamp()
                    .setThumbnail(interaction.user.avatarURL())
                    .setColor(0xFFF4D8)

                await channel.send({ content: `||<@${OWNER_ID}>||`, embeds: [embed] });
            }

            interaction.editReply({ content: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!" });
        }
    }

    if(!interaction.isStringSelectMenu()) return;

    if(interaction.customId === "help-cmd") {
        const selectedCategory = interaction.values[0];

        switch (selectedCategory) {
            case 'info':
                const embed = new EmbedBuilder()
                    .setTitle("**üå∫ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**")
                    .setDescription(`\`${process.env.PREFIX}help\`: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
\`${process.env.PREFIX}server\`: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
\`${process.env.PREFIX}user\`: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ`)
                    .setColor(0xFFF4D8)

                await interaction.reply({ embeds: [embed], ephemeral: true });
                break;
            case 'mod':
                const embed2 = new EmbedBuilder()
                    .setTitle("**üíÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è**")
                    .setDescription(`\`${process.env.PREFIX}ban\`: –±–ª–æ–∫–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
\`${process.env.PREFIX}kick\`: —É–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
\`${process.env.PREFIX}unban\`: —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∞–π–¥–∏
\`${process.env.PREFIX}clear\`: —É–¥–∞–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π`)
                    .setColor(0xFFF4D8)

                await interaction.reply({ embeds: [embed2], ephemeral: true });
                break;
            case 'actions':
                const embed3 = new EmbedBuilder()
                    .setTitle("**ü•ù –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è**")
                    .setDescription(`\`${process.env.PREFIX}punch\`: —É–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
\`${process.env.PREFIX}hug\`: –æ–±–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
\`${process.env.PREFIX}kiss\`: –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
\`${process.env.PREFIX}cry\`: –∑–∞–ø–ª–∞–∫–∞—Ç—å
\`${process.env.PREFIX}lick\`: –æ–±–ª–∏–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
\`${process.env.PREFIX}wave\`: –ø–æ–º–∞—Ö–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É`)
                    .setColor(0xFFF4D8)

                await interaction.reply({ embeds: [embed3], ephemeral: true });
                break;
            case 'utils':
                const embed4 = new EmbedBuilder()
                    .setTitle("**üçµ –£—Ç–∏–ª–∏—Ç—ã**")
                    .setDescription(`\`${process.env.PREFIX}avatar\`: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
\`${process.env.PREFIX}rand\`: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ
\`${process.env.PREFIX}calc\`: –º–∞–ª–µ–Ω—å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —á–µ—Ç—ã—Ä–µ –æ–ø–µ—Ä–∞—Ü–∏–∏`)
                    .setColor(0xFFF4D8)

                await interaction.reply({ embeds: [embed4], ephemeral: true });
                break;
            default:
                break;
        }
    }

    async function newFunction(guildChannel: any) {
        const ticketCreatorUsername = guildChannel.name.replace('ticket-', '').replace('closed-', '');
        const members = await interaction.guild?.members.fetch();
        const ticketCreator = members?.find(member => member.user.username === ticketCreatorUsername
        );
        return ticketCreator;
    }
});
